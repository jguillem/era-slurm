#!/usr/bin/env python

import os
import sys
import subprocess
import pandas as pd
import numpy as np
import ldap

def processCommands(outputList):
	p0 = subprocess.Popen(["cat", "/var/log/slurm/eraWrong.log"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	output = p0.communicate()[0]

	#print output
	for idx, line in enumerate(output.splitlines()):
                outputList.append(line.split(","))

	p0.stdout.close()

def generateDataFrame(outputList):
	outputDF = pd.DataFrame(outputList, columns=['Mounth', 'Day', 'Hour', 'User', 'JobID', 'Step', 'TotalStep', 'CPU', 'MemAverage', 'MemMin'])
	return outputDF

def sendMail(to, jobID):
	print jobID
	subject = "Cluster Brain CNS - Incorrect Resources Reservation"
	p0 = subprocess.Popen(["era", "%s" %jobID], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	p1 = subprocess.Popen(["ansi2html"], stdin=p0.stdout, stdout=subprocess.PIPE)

	eraOutput = p1.communicate()[0]

	message = """Dear user,

Please review the resource reservation parameters of their jobs on the cluster torn Brain.
You are using less than 50% of the reserved resources of the job below: """

	index = eraOutput.rfind('<pre class="ansi2html-content">')
	lenIndex = len('<pre class="ansi2html-content">')
	eraOutput = eraOutput[:index+31] + "\n" + message + "\n" + eraOutput[index+lenIndex:]

	#conversor = Ansi2HTMLConverter()
	#erahtml = """era "{b}" | ansi2html""".format(
        #    b=job
        #)
	#print eraOutput

	cmd = """echo '{e}' | mailx -a 'Content-Type: text/html' -s "{s}" "{to}" 2>/dev/null""".format(
          e=eraOutput, s=subject, to=to
        )
	os.system(cmd)	
	
def ldapSearch(User):
	bind_dn = "uid=" + User + ",ou=People,dc=s,dc=upf,dc=edu"
	ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)
	connection = ldap.initialize('ldap://br-ldap01')
	connection.start_tls_s()
	connection.simple_bind_s('cn=admin,dc=s,dc=upf,dc=edu','xU254Aftr8VN')
	ldap_result_id = connection.search(bind_dn,ldap.SCOPE_SUBTREE)
	result_type, result_data = connection.result(ldap_result_id, 0)
	return result_data[0][1]["bmail"][0]
	
 
if __name__ == "__main__":
	outputList = []
	processCommands(outputList)

	if len(outputList):
		eraDF = generateDataFrame(outputList)		
		eraUniqueDF = eraDF.drop_duplicates(subset='JobID')
		eraSortDF = eraUniqueDF.sort(['JobID'])
				
		if not eraSortDF.empty:
			for index, row in eraSortDF.iterrows():
				eraProcess = subprocess.Popen(["era", "%d" % int(row["JobID"])], stdout=subprocess.PIPE, stderr=subprocess.PIPE)				
				eraOutput = eraProcess.communicate()[0]
				
				#email = ldapSearch(row["User"])
				#print "%s %s" %(row["JobID"], email)
				sendMail("hpccns@upf.edu",row["JobID"])
