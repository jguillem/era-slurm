#!/usr/bin/env python

import os
import sys
import subprocess
import pandas as pd
import numpy as np
import time
import datetime

LOG_FILE_GOOD = "/var/log/slurm/eraGood.log"
LOG_FILE_WRONG = "/var/log/slurm/eraWrong.log"
#PATH = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
#LD_LIBRARY_PATH = "/usr/local/lib:/usr/lib:/lib"

def formatMEM(memFull):

	format = memFull[-1:]
	value = memFull.split(format,1)[0]
	value = int(value.split(".",1)[0])
	value = int(value)
	if format == 'G':
		value = (value * 1024) * 1024
	elif format == 'M':
		value = value * 1024
	return value
	

def convertMEM(MEM):

	memString = str(MEM)
	memFull = memString.split("=",1)[1]
	memKylobyte = formatMEM(memFull)
	return memKylobyte

def convertAlloc(ALLOC):

	ALLOC = ALLOC.split("=",1)[1]
	return ALLOC


def convertTIME(TIME):

	hour = 0
	minute = 0
	second = 0

	colonCount = TIME.count(':')
	day = TIME.split("-",1)[0] if TIME.count('-') > 0 else 0
	

	if colonCount == 1:
               	minute, second = TIME.split(':')		
		second = int(second.split('.')[1])
		second = float(second) / 1000
	elif colonCount == 2:
		if day != 0:
			TIME = TIME.split('-',1)[1]
			hour, minute, second = map(float, TIME.split(':'))
		else:
			day = 0 
			hour, minute, second = map(float, TIME.split(':'))
		
	day = int(day) * 86400
	hour = int(hour) * 3600
	minute = int(minute) * 60
	
	return float(day) + float(hour) + float(minute) + float(second)
	
def normalizeValue(Kilobytes):

	size = Kilobytes * 1024
	power = 1024
	n = 0
	Dic_powerN = {0 : '', 1: 'K', 2: 'M', 3: 'G', 4: 'T'}
	while size > power:
		size /= float(power)
		n += 1
	size = "%.2f" % size
	size = str(size)
	size += Dic_powerN[n]	
	return size

def processCommands(outputList, outputListTwo):
		
	p0 = subprocess.Popen(["/usr/bin/sacct", "-j", "%s" % jobID, "-o", "alloctres%25,MaxRSS,cputime,totalcpu%15,state", "-s", "CD"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=os.environ)
	p1 = subprocess.Popen(["grep", "-v", "^-"], stdin=p0.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=os.environ)
	p2 = subprocess.Popen(["tail", "-n", "+2"], stdin=p1.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=os.environ)
	p3 = subprocess.Popen(["awk", "NR%2==0"], stdin=p2.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=os.environ)
	p4 = subprocess.Popen(["sort", "-nrk2"], stdin=p3.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=os.environ)
	
	p5 = subprocess.Popen(["sacct", "-j", "%s" % jobID, "-o", "user%25,jobid%25", "-s", "PD"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	p6 = subprocess.Popen(["tail", "-n", "+3"], stdin=p5.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

	p7 = subprocess.Popen(["sacct", "-j", "%s" % jobID, "-o", "User%25,jobid%25", "-X"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)						   
	p8 = subprocess.Popen(["tail", "-n", "+3"], stdin=p7.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	
	outputOne = p4.communicate()[0]	
	outputTwo = p6.communicate()[0]
	outputThree = p8.communicate()[0]

	for idx, line in enumerate(outputOne.splitlines()):
		outputList.append(line.split())

	for idx, line in enumerate(outputTwo.splitlines()):
                outputListTwo.append(line.split())

	if not len(outputListTwo):
		for idx, line in enumerate(outputThree.splitlines()):
			outputListTwo.append(line.split())

	p1.stdout.close()
	p2.stdout.close()
	p3.stdout.close()
	p4.stdout.close()
	p5.stdout.close()
	p6.stdout.close()
	p7.stdout.close()
	p8.stdout.close()
        
def thisPercent(percent, totalSteps):	
	
	return int((float(percent)/100) * float(totalSteps))

def generateDataFrame(outputList, outputListTwo):
	
	outputDF = pd.DataFrame(outputList, columns=['allocTRES', 'maxMemK', 'cpuTime', 'totalCpuTime', 'state'])
	allocDF = pd.DataFrame(outputDF.allocTRES.str.split(',').tolist(), columns=['CPU', 'allocMemK', 'Nodes'])
	outputDF = pd.merge(allocDF,outputDF, left_index=True, right_index=True)
	outputDF.CPU = outputDF.CPU.apply(convertAlloc)
	outputDF.Nodes = outputDF.Nodes.apply(convertAlloc)
	outputDF.allocMemK = outputDF.allocMemK.apply(convertMEM)
	outputDF.maxMemK = outputDF.maxMemK.apply(formatMEM)
	outputDFTwo = pd.DataFrame(outputListTwo, columns=['User', 'Jobid'])
	
	del outputDF['allocTRES']

	return outputDF, outputDFTwo

def printValues():
	
	print "\nJob ID: %d" %int(jobID)
	print "User name: %s" %user
	print "Completed Steps: %d of %d" %(countAllocMem, totalSteps)
	print "Total allocated CPU: %d" %int(cpuAlloc)
	
	if eficiCPU >= 50.0:
		print bcolors.OKGREEN + "CPU Efficiency: %.2f%%" %float(eficiCPU) + bcolors.ENDC
	else:
		print bcolors.FAIL + "CPU Efficiency: %.2f%%" %float(eficiCPU) + bcolors.ENDC
	print "Total allocated Memory: %s" %totalAllocMemStr			
	
	print "Total Used Memory: %s" %totalMaxMemStr
	
	if eficiMem >= 50.0:
		print bcolors.OKGREEN + "Memory Efficiency (Average): %.2f%%" %float(eficiMem) + bcolors.ENDC
	else:
		print bcolors.FAIL + "Memory Efficiency (Average): %.2f%%" %float(eficiMem) + bcolors.ENDC
	if eficiMaxMem >= 50.0:
		print bcolors.OKGREEN + "Memory Efficiency (Minimum memory required): %.2f%% \n" %float(eficiMaxMem) + bcolors.ENDC
	else:	
		print bcolors.FAIL + "Memory Efficiency (Minimum memory required): %.2f%% \n" %float(eficiMaxMem) + bcolors.ENDC
	
	print "Minimum memory required by array so far: %s" %MaxUsedMem
	print "You have reserved this amount: %s\n" %AllocatedMem

def printHelp():
		print "era [<OPTION>]"
                print "         Valid <OPTION> values are:"
                print "         jobid:"
                print "                 The jobid"
                print "EXAMPLE"
                print "         era 99744\n"
                print "         Job ID: 99744"
                print "         Completed Steps: 759 of 861"
                print "         Total allocated CPU: 1518"
                print "         CPU Efficiency: 96.32%"
                print "         Total allocated Memory: 17.79T"
                print "         Total Used Memory: 1.26T"
                print "         Memory Efficiency (Average): 7.08%"
                print "         Memory Efficiency (Minimum memory required): 7.28%\n"

                print "         Minimum memory required by step/array: 1.75G"
                print "         Allocated memory by step/array: 24.00G\n"

def writeLog(LOG_FILE):
	month = datetime.date.today().strftime("%a")
	day = datetime.date.today().strftime("%d")
	hour = time.strftime("%X")


	if os.path.exists(LOG_FILE):
		file = open('%s' % LOG_FILE, 'a')		
	else:
		file = open('%s' % LOG_FILE, 'w+')
		
	file.write("%s,%s,%s,%s,%d,%d,%d,%.2f,%.2f,%.2f" % (month, day, hour, user, int(jobID), countAllocMem, totalSteps, float(eficiCPU), float(eficiMem), float(eficiMaxMem)))
	file.write("\n")
	file.close()



def logValues():
	
	#Wrong allocations
	if eficiMem < 50.0: 
		if countAllocMem < thisPercent(10, totalSteps):
                        writeLog(LOG_FILE_WRONG)

	elif eficiMaxMem < 50.0:
		if thisPercent(10, totalSteps) <= countAllocMem <= thisPercent(50, totalSteps):
			writeLog(LOG_FILE_WRONG)	
			
	#Good allocations
	else:
		writeLog(LOG_FILE_GOOD)
		
class bcolors:
	
	HEADER = '\033[95m'
	OKBLUE = '\033[94m'
	OKGREEN = '\033[92m'
	WARNING = '\033[93m'
	FAIL = '\033[91m'
	ENDC = '\033[0m'
	BOLD = '\033[1m'
	UNDERLINE = '\033[4m'	
	BLINK = '\033[6m'

def calcTotalSteps(jobId):
	
	totalSteps = 1
	
	if "-" in str(jobId):
		if "%" in str(jobId):
			totalSteps = int(jobId[jobId.find("-")+1:jobId.find("%")])
		else:
			totalSteps = int(jobId[jobId.find("-")+1:jobId.find("]")])
	
	return int(totalSteps)

if __name__ == "__main__":
	
	jobID = ""
	totalSteps = ""
	outputList = []	
	outputListTwo = []	

	if len(sys.argv) != 1:
		
		if len(sys.argv) == 2:
			jobID = sys.argv[1]			
		elif sys.argv[1] == "-e":
			jobID = sys.argv[2]

		processCommands(outputList, outputListTwo)
						
		if len(outputList) and len(outputListTwo):

			outputDF, outputDFTwo = generateDataFrame(outputList, outputListTwo)
					
			user = outputDFTwo.User[0]
			
			if outputDFTwo['Jobid'].count() == 1:
				totalSteps = calcTotalSteps(outputDFTwo.Jobid[0])
			else:
				totalSteps = outputDFTwo['Jobid'].count()
						
			countAllocMem = outputDF['allocMemK'].count()
        		countMaxMem = outputDF['maxMemK'].count()
		
			totalAllocMem = outputDF['allocMemK'].sum()
        		totalMaxMem = outputDF['maxMemK'].sum()
			totalAllocMemStr = normalizeValue(totalAllocMem)
			totalMaxMemStr = normalizeValue(totalMaxMem)
			
		
			promedioAlloc = float(totalAllocMem / countAllocMem) if countAllocMem != 0 else float(totalAllocMem)
        		promedioMax = float(totalMaxMem / countMaxMem) if countMaxMem != 0 else float(totalMaxMem)
		

			eficiMem = float((promedioMax * 100) / promedioAlloc)
        		eficiMaxMem = (float(outputDF.maxMemK[0]) * 100) / float(outputDF.allocMemK[0])
					
			cpuTimeList = outputDF.cpuTime.apply(convertTIME).tolist()
			outputDF['cpuTimeSec'] = pd.Series(cpuTimeList)
		
			totalTimeList = outputDF.totalCpuTime.apply(convertTIME).tolist()
			outputDF['totalCpuTimeSec'] = pd.Series(totalTimeList)
		
			del outputDF['cpuTime']
			del outputDF['totalCpuTime']
					
			cpuTimeSum = float(outputDF['cpuTimeSec'].sum())
			totalTimeSum = float(outputDF['totalCpuTimeSec'].sum())
				
			cpuAlloc = int(outputDF.CPU[0]) * int(outputDF.CPU.count())
			eficiCPU = float((totalTimeSum / cpuTimeSum) * 100)
			
			MaxUsedMem = normalizeValue(outputDF.maxMemK[0])
			AllocatedMem = normalizeValue(outputDF.allocMemK[0])
						
			if sys.argv[1] != "-e":		
				printValues()
			else:
				logValues()
		else: 
			if sys.argv[1] == "-e":
				sys.exit()
			else:
				print "There are no finished steps for the job %s" %jobID
				
	
	else:
		printHelp()
